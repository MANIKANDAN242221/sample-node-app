pipeline {
    agent none

    environment {
        AWS_ACCOUNT_ID     = '951042686423'
        AWS_REGION         = 'ap-south-1'
        REPO_NAME          = 'sample-node-app'
        IMAGE_TAG          = 'latest'
        ECR_REGISTRY       = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_URI          = "${ECR_REGISTRY}/${REPO_NAME}:${IMAGE_TAG}"
        GIT_REPO           = 'https://github.com/MANIKANDAN242221/sample-node-app.git'
        AWS_CREDENTIALS_ID = 'aws-jenkins-creds'
    }

    stages {
        stage('Clone Repository') {
            agent { label 'master' }
            steps {
                git url: "${GIT_REPO}", branch: 'main'
            }
        }

        stage('Ensure .env File') {
            agent { label 'master' }
            steps {
                sh '''
                    echo "PORT=9000" > .env
                    echo "NODE_ENV=production" >> .env
                    echo "CUSTOM_MESSAGE=Hello from Jenkins pipeline" >> .env
                '''
            }
        }

        stage('Install Dependencies & Build UI') {
            agent { label 'master' }
            steps {
                sh '''
                    echo "üì¶ Installing Node.js dependencies..."
                    npm install

                    echo "üèóÔ∏è Building frontend..."
                    npm run build
                '''
            }
        }

        stage('Build Docker Image') {
            agent { label 'master' }
            steps {
                sh '''
                    echo "üóëÔ∏è Removing old Docker image..."
                    docker rmi -f ${REPO_NAME}:latest || true

                    echo "üê≥ Building new Docker image..."
                    docker-compose build --no-cache
                '''
            }
        }

        stage('Tag Image for ECR') {
            agent { label 'master' }
            steps {
                sh "docker tag ${REPO_NAME}:latest ${IMAGE_URI}"
            }
        }

        stage('Login to ECR') {
            agent { label 'master' }
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: "${AWS_CREDENTIALS_ID}",
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )
                ]) {
                    sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region ${AWS_REGION}
                        aws ecr get-login-password --region ${AWS_REGION} \
                        | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    '''
                }
            }
        }

        stage('Push Image to ECR') {
            agent { label 'master' }
            steps {
                sh "docker push ${IMAGE_URI}"
            }
        }

        stage('Deploy Container on Agent') {
            agent { label 'agent' }
            steps {
                sh '''
                    docker-compose down || true
                    docker-compose up -d
                '''
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up...'
        }
        success {
            echo '‚úÖ Pipeline executed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
